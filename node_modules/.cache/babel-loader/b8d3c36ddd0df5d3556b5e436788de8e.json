{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aphex\\\\Documents\\\\Atom_Projects\\\\webApp\\\\highscore\\\\src\\\\component\\\\JsonProcessor.js\";\nimport React from 'react';\nimport data from './data/scores.json'; //The supplied data\n\nimport Table from './Table.js'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minimumSubs = 3;\nconst maximumSubs = 24;\nconst leaderBoardSize = 10;\n\nfunction JsonProcessor() {\n  var table = [];\n  var player = [];\n  var position = [];\n\n  for (var i = 0; i < data.length; i++) {\n    var name = data[i];\n\n    if (name.submissions.length > minimumSubs) {\n      // Ruling out submissions less than 3.\n      var array = name.submissions;\n      var scoreTotal = [];\n\n      for (var j = 0; j < array.length; j++) {\n        var scores = array[j];\n        scoreTotal.push(scores.score);\n      }\n\n      var entry = [];\n      entry.push(name.name);\n      entry.push(accumulateScores(scoreTotal));\n      table.push(entry); // This is the data for the highscore table\n    }\n  } // Sorting table data in score order for easy display\n\n\n  table.sort(function (a, b) {\n    return b[1] - a[1];\n  }); // Reducing the size of our table to the most successful participants\n\n  table.length = leaderBoardSize - 1; // Calculating the positions of each entry\n\n  calculatePostion(table);\n  table.push(position);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      data: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this) // Rendering the table\n  ;\n}\n\n_c = JsonProcessor;\n\nfunction accumulateScores(input) {\n  var sum = 0;\n  var test = 0; // Sorting the scores so we can add up the best submissions\n\n  input.sort(function (a, b) {\n    return b - a;\n  });\n\n  for (var k = 0; k < input.length; k++) {\n    //Adding up everything\n    if (k <= maximumSubs - 1) {\n      // Keeping sumissions to the best 24.\n      sum += input[k];\n      test++;\n    }\n  }\n\n  return sum;\n} // Ensuring that shared scores equal shared positions\n\n\nfunction calculatePostion(arr) {\n  console.log(arr);\n}\n\nexport default JsonProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonProcessor\");","map":{"version":3,"sources":["C:/Users/aphex/Documents/Atom_Projects/webApp/highscore/src/component/JsonProcessor.js"],"names":["React","data","Table","minimumSubs","maximumSubs","leaderBoardSize","JsonProcessor","table","player","position","i","length","name","submissions","array","scoreTotal","j","scores","push","score","entry","accumulateScores","sort","a","b","calculatePostion","input","sum","test","k","arr","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAAsC;;AACtC,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,SAASC,aAAT,GAAyB;AACrB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,IAAI,CAACU,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAClC,QAAIE,IAAI,GAAGX,IAAI,CAACS,CAAD,CAAf;;AACA,QAAGE,IAAI,CAACC,WAAL,CAAiBF,MAAjB,GAA0BR,WAA7B,EAA0C;AAAE;AACxC,UAAIW,KAAK,GAAGF,IAAI,CAACC,WAAjB;AACA,UAAIE,UAAU,GAAG,EAAjB;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAACH,MAAzB,EAAiCK,CAAC,EAAlC,EAAqC;AACnC,YAAIC,MAAM,GAAGH,KAAK,CAACE,CAAD,CAAlB;AACAD,QAAAA,UAAU,CAACG,IAAX,CAAgBD,MAAM,CAACE,KAAvB;AACH;;AACD,UAAIC,KAAK,GAAG,EAAZ;AACAA,MAAAA,KAAK,CAACF,IAAN,CAAWN,IAAI,CAACA,IAAhB;AACAQ,MAAAA,KAAK,CAACF,IAAN,CAAWG,gBAAgB,CAACN,UAAD,CAA3B;AACAR,MAAAA,KAAK,CAACW,IAAN,CAAWE,KAAX,EAXwC,CAWrB;AACpB;AACF,GApBoB,CAsBnB;;;AACAb,EAAAA,KAAK,CAACe,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,GAFD,EAvBmB,CA2BnB;;AACAhB,EAAAA,KAAK,CAACI,MAAN,GAAeN,eAAe,GAAE,CAAhC,CA5BmB,CA8BnB;;AACAoB,EAAAA,gBAAgB,CAAClB,KAAD,CAAhB;AACAA,EAAAA,KAAK,CAACW,IAAN,CAAWT,QAAX;AAEJ,sBACE;AAAA,2BAAK,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEF;AAAb;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UADF,CACmC;AADnC;AAGD;;KArCQD,a;;AAuCT,SAASe,gBAAT,CAA0BK,KAA1B,EAAgC;AAC9B,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAG,CAAX,CAF8B,CAI9B;;AACAF,EAAAA,KAAK,CAACJ,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,GAAGD,CAAX;AACD,GAFD;;AAIA,OAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,KAAK,CAACf,MAAzB,EAAiCkB,CAAC,EAAlC,EAAqC;AAAE;AACrC,QAAGA,CAAC,IAAIzB,WAAW,GAAG,CAAtB,EAAwB;AAAE;AACtBuB,MAAAA,GAAG,IAAID,KAAK,CAACG,CAAD,CAAZ;AACAD,MAAAA,IAAI;AACL;AACF;;AACD,SAAOD,GAAP;AACD,C,CAEH;;;AACA,SAASF,gBAAT,CAA0BK,GAA1B,EAA+B;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAGD,eAAexB,aAAf","sourcesContent":["import React from 'react';\r\nimport data from './data/scores.json' //The supplied data\r\nimport Table from './Table.js'\r\n\r\n// Constants\r\nconst minimumSubs = 3;\r\nconst maximumSubs = 24;\r\nconst leaderBoardSize = 10;\r\n\r\nfunction JsonProcessor() {\r\n    var table = [];\r\n    var player = [];\r\n    var position = [];\r\n\r\n    for(var i = 0; i < data.length; i++){\r\n      var name = data[i];\r\n      if(name.submissions.length > minimumSubs) { // Ruling out submissions less than 3.\r\n          var array = name.submissions;\r\n          var scoreTotal = [];\r\n\r\n          for(var j = 0; j < array.length; j++){\r\n            var scores = array[j];\r\n            scoreTotal.push(scores.score);\r\n        }\r\n        var entry = [];\r\n        entry.push(name.name);\r\n        entry.push(accumulateScores(scoreTotal));\r\n        table.push(entry); // This is the data for the highscore table\r\n      }\r\n    }\r\n\r\n      // Sorting table data in score order for easy display\r\n      table.sort(function(a,b) {\r\n        return b[1] - a[1];\r\n      });\r\n\r\n      // Reducing the size of our table to the most successful participants\r\n      table.length = leaderBoardSize -1;\r\n\r\n      // Calculating the positions of each entry\r\n      calculatePostion(table);\r\n      table.push(position);\r\n\r\n  return (\r\n    <div><Table data={table}/></div> // Rendering the table\r\n  );\r\n}\r\n\r\nfunction accumulateScores(input){\r\n  var sum = 0;\r\n  var test = 0;\r\n\r\n  // Sorting the scores so we can add up the best submissions\r\n  input.sort(function(a,b) {\r\n    return b - a;\r\n  });\r\n\r\n  for(var k = 0; k < input.length; k++){ //Adding up everything\r\n    if(k <= maximumSubs - 1){ // Keeping sumissions to the best 24.\r\n        sum += input[k];\r\n        test ++;\r\n      }\r\n    }\r\n    return(sum);\r\n  }\r\n\r\n// Ensuring that shared scores equal shared positions\r\nfunction calculatePostion(arr) {\r\n  console.log(arr);\r\n}\r\n\r\n\r\nexport default JsonProcessor;\r\n"]},"metadata":{},"sourceType":"module"}