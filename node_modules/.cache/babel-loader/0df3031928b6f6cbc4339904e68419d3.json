{"ast":null,"code":"import React from'react';import data from'./data/scores.json';//The supplied data\nimport Table from'./Table.js';// Constants\nimport{jsx as _jsx}from\"react/jsx-runtime\";var minimumSubs=3;var maximumSubs=24;var leaderBoardSize=10;function JsonProcessor(){var table=[];// The data for the table\nvar player=[];// The playet names\nvar position=[];// The players \"rank\" in the table\n// Iterate through the JSON data, group up scores for each player\nfor(var i=0;i<data.length;i++){var name=data[i];if(name.submissions.length>minimumSubs){// Ruling out players with less than 3 submissions\nvar arr=name.submissions;var scoreTotal=[];for(var j=0;j<arr.length;j++){var scores=arr[j];scoreTotal.push(scores.score);}var entry=[];entry.push(name.name);entry.push(totalScores(scoreTotal));// Totalling submissions for each player\ntable.push(entry);// This is the Score and Name data for the highscore table\n}}// Sorting table data in score order\ntable.sort(function(a,b){return b[1]-a[1];});// Reducing the size of our table to the most successful participants\ntable.length=leaderBoardSize;// Calculating the positions of each entry and adding it to the table array\nposition.push(calculatePostion(table,position));for(var n=0;n<table.length;n++){table[n].push(position[n]);}return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Table,{data:table})})// Rendering the table\n;}// This function iterates through the sorted submissions and adds them up.\n// It sorts the submissions in order of score size and adds up the first 24 as per\n// requirement.\nfunction totalScores(input){var sum=0;// Sorting the scores so we can add up the best submissions\ninput.sort(function(a,b){return b-a;});for(var k=0;k<input.length;k++){//Adding up everything\nif(k<=maximumSubs-1){// Keeping submissions to the best 24.\nsum+=input[k];test++;}}return sum;}// This function ensures that the rankings are fair. People with equal scores\n// should have equal ranks.\nfunction calculatePostion(arr,position){position.push(1);for(var m=1;m<arr.length;m++){if(arr[m][1]==arr[m-1][1]){position.push(position[m-1]);}else{position.push(position[m-1]+1);}}return position;}export default JsonProcessor;","map":{"version":3,"sources":["C:/Users/aphex/Documents/Atom_Projects/webApp/highscore/src/component/JsonProcessor.js"],"names":["React","data","Table","minimumSubs","maximumSubs","leaderBoardSize","JsonProcessor","table","player","position","i","length","name","submissions","arr","scoreTotal","j","scores","push","score","entry","totalScores","sort","a","b","calculatePostion","n","input","sum","k","test","m"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAAsC;AACtC,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CAEA;2CACA,GAAMC,CAAAA,WAAW,CAAG,CAApB,CACA,GAAMC,CAAAA,WAAW,CAAG,EAApB,CACA,GAAMC,CAAAA,eAAe,CAAG,EAAxB,CAEA,QAASC,CAAAA,aAAT,EAAyB,CACvB,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAAgB;AAChB,GAAIC,CAAAA,MAAM,CAAG,EAAb,CAAiB;AACjB,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CAAmB;AAEnB;AACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGT,IAAI,CAACU,MAAxB,CAAgCD,CAAC,EAAjC,CAAoC,CAClC,GAAIE,CAAAA,IAAI,CAAGX,IAAI,CAACS,CAAD,CAAf,CACA,GAAGE,IAAI,CAACC,WAAL,CAAiBF,MAAjB,CAA0BR,WAA7B,CAA0C,CAAE;AAC1C,GAAIW,CAAAA,GAAG,CAAGF,IAAI,CAACC,WAAf,CACA,GAAIE,CAAAA,UAAU,CAAG,EAAjB,CAEA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGF,GAAG,CAACH,MAAvB,CAA+BK,CAAC,EAAhC,CAAmC,CACjC,GAAIC,CAAAA,MAAM,CAAGH,GAAG,CAACE,CAAD,CAAhB,CACAD,UAAU,CAACG,IAAX,CAAgBD,MAAM,CAACE,KAAvB,EACD,CACD,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACAA,KAAK,CAACF,IAAN,CAAWN,IAAI,CAACA,IAAhB,EACAQ,KAAK,CAACF,IAAN,CAAWG,WAAW,CAACN,UAAD,CAAtB,EAAqC;AACrCR,KAAK,CAACW,IAAN,CAAWE,KAAX,EAAmB;AACpB,CACF,CAED;AACAb,KAAK,CAACe,IAAN,CAAW,SAASC,CAAT,CAAWC,CAAX,CAAc,CACvB,MAAOA,CAAAA,CAAC,CAAC,CAAD,CAAD,CAAOD,CAAC,CAAC,CAAD,CAAf,CACD,CAFD,EAIA;AACAhB,KAAK,CAACI,MAAN,CAAeN,eAAf,CAEA;AACAI,QAAQ,CAACS,IAAT,CAAcO,gBAAgB,CAAClB,KAAD,CAAQE,QAAR,CAA9B,EACA,IAAI,GAAIiB,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGnB,KAAK,CAACI,MAAzB,CAAiCe,CAAC,EAAlC,CAAqC,CACnCnB,KAAK,CAACmB,CAAD,CAAL,CAASR,IAAT,CAAcT,QAAQ,CAACiB,CAAD,CAAtB,EACD,CAED,mBACE,kCAAK,KAAC,KAAD,EAAO,IAAI,CAAEnB,KAAb,EAAL,EAAiC;AADnC,CAGD,CAGD;AACA;AACA;AACA,QAASc,CAAAA,WAAT,CAAqBM,KAArB,CAA2B,CACzB,GAAIC,CAAAA,GAAG,CAAG,CAAV,CAEA;AACAD,KAAK,CAACL,IAAN,CAAW,SAASC,CAAT,CAAWC,CAAX,CAAc,CACvB,MAAOA,CAAAA,CAAC,CAAGD,CAAX,CACD,CAFD,EAIA,IAAI,GAAIM,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGF,KAAK,CAAChB,MAAzB,CAAiCkB,CAAC,EAAlC,CAAqC,CAAE;AACrC,GAAGA,CAAC,EAAIzB,WAAW,CAAG,CAAtB,CAAwB,CAAE;AACxBwB,GAAG,EAAID,KAAK,CAACE,CAAD,CAAZ,CACAC,IAAI,GACL,CACF,CACD,MAAOF,CAAAA,GAAP,CACD,CAED;AACA;AACA,QAASH,CAAAA,gBAAT,CAA0BX,GAA1B,CAA+BL,QAA/B,CAAyC,CACvCA,QAAQ,CAACS,IAAT,CAAc,CAAd,EACA,IAAI,GAAIa,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGjB,GAAG,CAACH,MAAvB,CAA+BoB,CAAC,EAAhC,CAAmC,CACjC,GAAGjB,GAAG,CAACiB,CAAD,CAAH,CAAO,CAAP,GAAajB,GAAG,CAACiB,CAAC,CAAG,CAAL,CAAH,CAAW,CAAX,CAAhB,CAA8B,CAC5BtB,QAAQ,CAACS,IAAT,CAAcT,QAAQ,CAACsB,CAAC,CAAG,CAAL,CAAtB,EACD,CAFD,IAEO,CACLtB,QAAQ,CAACS,IAAT,CAAcT,QAAQ,CAACsB,CAAC,CAAG,CAAL,CAAR,CAAkB,CAAhC,EACD,CACF,CACD,MAAOtB,CAAAA,QAAP,CACD,CAGD,cAAeH,CAAAA,aAAf","sourcesContent":["import React from 'react';\r\nimport data from './data/scores.json' //The supplied data\r\nimport Table from './Table.js'\r\n\r\n// Constants\r\nconst minimumSubs = 3;\r\nconst maximumSubs = 24;\r\nconst leaderBoardSize = 10;\r\n\r\nfunction JsonProcessor() {\r\n  var table = []; // The data for the table\r\n  var player = []; // The playet names\r\n  var position = []; // The players \"rank\" in the table\r\n\r\n  // Iterate through the JSON data, group up scores for each player\r\n  for(var i = 0; i < data.length; i++){\r\n    var name = data[i];\r\n    if(name.submissions.length > minimumSubs) { // Ruling out players with less than 3 submissions\r\n      var arr = name.submissions;\r\n      var scoreTotal = [];\r\n\r\n      for(var j = 0; j < arr.length; j++){\r\n        var scores = arr[j];\r\n        scoreTotal.push(scores.score);\r\n      }\r\n      var entry = [];\r\n      entry.push(name.name);\r\n      entry.push(totalScores(scoreTotal)); // Totalling submissions for each player\r\n      table.push(entry); // This is the Score and Name data for the highscore table\r\n    }\r\n  }\r\n\r\n  // Sorting table data in score order\r\n  table.sort(function(a,b) {\r\n    return b[1] - a[1];\r\n  });\r\n\r\n  // Reducing the size of our table to the most successful participants\r\n  table.length = leaderBoardSize;\r\n\r\n  // Calculating the positions of each entry and adding it to the table array\r\n  position.push(calculatePostion(table, position));\r\n  for(var n = 0; n < table.length; n++){\r\n    table[n].push(position[n]);\r\n  }\r\n\r\n  return (\r\n    <div><Table data={table}/></div> // Rendering the table\r\n  );\r\n}\r\n\r\n\r\n// This function iterates through the sorted submissions and adds them up.\r\n// It sorts the submissions in order of score size and adds up the first 24 as per\r\n// requirement.\r\nfunction totalScores(input){\r\n  var sum = 0;\r\n\r\n  // Sorting the scores so we can add up the best submissions\r\n  input.sort(function(a,b) {\r\n    return b - a;\r\n  });\r\n\r\n  for(var k = 0; k < input.length; k++){ //Adding up everything\r\n    if(k <= maximumSubs - 1){ // Keeping submissions to the best 24.\r\n      sum += input[k];\r\n      test ++;\r\n    }\r\n  }\r\n  return(sum);\r\n}\r\n\r\n// This function ensures that the rankings are fair. People with equal scores\r\n// should have equal ranks.\r\nfunction calculatePostion(arr, position) {\r\n  position.push(1);\r\n  for(var m = 1; m < arr.length; m++){\r\n    if(arr[m][1] == arr[m - 1][1]){\r\n      position.push(position[m - 1])\r\n    } else {\r\n      position.push(position[m - 1] + 1)\r\n    }\r\n  }\r\n  return(position);\r\n}\r\n\r\n\r\nexport default JsonProcessor;\r\n"]},"metadata":{},"sourceType":"module"}