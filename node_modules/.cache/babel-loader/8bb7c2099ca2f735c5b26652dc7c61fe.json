{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aphex\\\\Documents\\\\Atom_Projects\\\\webApp\\\\highscore\\\\src\\\\component\\\\JsonProcessor.js\";\nimport React from 'react';\nimport data from './data/scores.json';\nimport Table from './Table.js'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minimumSubs = 3;\nconst maximumSubs = 24;\n\nfunction JsonProcessor() {\n  var results = []; //var names = [];\n\n  for (var i = 0; i < data.length; i++) {\n    var name = data[i];\n\n    if (name.submissions.length > minimumSubs) {\n      // Ruling out submissions less than 3.\n      var array = name.submissions;\n      var scoreTotal = [];\n\n      for (var j = 0; j < array.length; j++) {\n        var scores = array[j];\n        scoreTotal.push(scores.score);\n      } //results.push(accumulateScores(scoreTotal));\n      //names.push(name.name);\n\n    }\n  } // bundling up the data\n\n\n  var table = []; //table.push(names);\n  //table.push(results);\n  // Sorting table data in score order for easy display\n\n  table.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  console.log(table);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      data: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_c = JsonProcessor;\n\nfunction accumulateScores(input) {\n  var sum = 0;\n  var test = 0; // Sorting the scores so we can add up the best submissions\n\n  input.sort(function (a, b) {\n    return b - a;\n  });\n\n  for (var k = 0; k < input.length; k++) {\n    //Adding up everything\n    if (k <= maximumSubs - 1) {\n      // Keeping sumissions to the best 24.\n      sum += input[k];\n      test++;\n    }\n  }\n\n  return sum;\n}\n\nexport default JsonProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonProcessor\");","map":{"version":3,"sources":["C:/Users/aphex/Documents/Atom_Projects/webApp/highscore/src/component/JsonProcessor.js"],"names":["React","data","Table","minimumSubs","maximumSubs","JsonProcessor","results","i","length","name","submissions","array","scoreTotal","j","scores","push","score","table","sort","a","b","console","log","accumulateScores","input","sum","test","k"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,WAAW,GAAG,EAApB;;AAEA,SAASC,aAAT,GAAyB;AACrB,MAAIC,OAAO,GAAG,EAAd,CADqB,CAErB;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,IAAI,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAClC,QAAIE,IAAI,GAAGR,IAAI,CAACM,CAAD,CAAf;;AACA,QAAGE,IAAI,CAACC,WAAL,CAAiBF,MAAjB,GAA0BL,WAA7B,EAA0C;AAAE;AACxC,UAAIQ,KAAK,GAAGF,IAAI,CAACC,WAAjB;AACA,UAAIE,UAAU,GAAG,EAAjB;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAACH,MAAzB,EAAiCK,CAAC,EAAlC,EAAqC;AACnC,YAAIC,MAAM,GAAGH,KAAK,CAACE,CAAD,CAAlB;AACAD,QAAAA,UAAU,CAACG,IAAX,CAAgBD,MAAM,CAACE,KAAvB;AACH,OAPuC,CAQxC;AACA;;AAED;AACF,GAlBoB,CAoBnB;;;AACA,MAAIC,KAAK,GAAG,EAAZ,CArBmB,CAsBnB;AACA;AAEA;;AACAA,EAAAA,KAAK,CAACC,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,GAFD;AAIAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEJ,sBACE;AAAA,2BAAK,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;KAnCQZ,a;;AAqCT,SAASkB,gBAAT,CAA0BC,KAA1B,EAAgC;AAC9B,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAG,CAAX,CAF8B,CAI9B;;AACAF,EAAAA,KAAK,CAACN,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,GAAGD,CAAX;AACD,GAFD;;AAIA,OAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,KAAK,CAAChB,MAAzB,EAAiCmB,CAAC,EAAlC,EAAqC;AAAE;AACrC,QAAGA,CAAC,IAAIvB,WAAW,GAAG,CAAtB,EAAwB;AAAE;AACtBqB,MAAAA,GAAG,IAAID,KAAK,CAACG,CAAD,CAAZ;AACAD,MAAAA,IAAI;AACL;AACF;;AACD,SAAOD,GAAP;AACD;;AAGH,eAAepB,aAAf","sourcesContent":["import React from 'react';\r\nimport data from './data/scores.json'\r\nimport Table from './Table.js'\r\n\r\n// Constants\r\nconst minimumSubs = 3;\r\nconst maximumSubs = 24;\r\n\r\nfunction JsonProcessor() {\r\n    var results = [];\r\n    //var names = [];\r\n\r\n    for(var i = 0; i < data.length; i++){\r\n      var name = data[i];\r\n      if(name.submissions.length > minimumSubs) { // Ruling out submissions less than 3.\r\n          var array = name.submissions;\r\n          var scoreTotal = [];\r\n\r\n          for(var j = 0; j < array.length; j++){\r\n            var scores = array[j];\r\n            scoreTotal.push(scores.score);\r\n        }\r\n        //results.push(accumulateScores(scoreTotal));\r\n        //names.push(name.name);\r\n\r\n      }\r\n    }\r\n\r\n      // bundling up the data\r\n      var table = [];\r\n      //table.push(names);\r\n      //table.push(results);\r\n\r\n      // Sorting table data in score order for easy display\r\n      table.sort(function(a,b) {\r\n        return b[1] - a[1];\r\n      });\r\n\r\n      console.log(table);\r\n\r\n  return (\r\n    <div><Table data={table}/></div>\r\n  );\r\n}\r\n\r\nfunction accumulateScores(input){\r\n  var sum = 0;\r\n  var test = 0;\r\n\r\n  // Sorting the scores so we can add up the best submissions\r\n  input.sort(function(a,b) {\r\n    return b - a;\r\n  });\r\n\r\n  for(var k = 0; k < input.length; k++){ //Adding up everything\r\n    if(k <= maximumSubs - 1){ // Keeping sumissions to the best 24.\r\n        sum += input[k];\r\n        test ++;\r\n      }\r\n    }\r\n    return(sum);\r\n  }\r\n\r\n\r\nexport default JsonProcessor;\r\n"]},"metadata":{},"sourceType":"module"}