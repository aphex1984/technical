{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aphex\\\\Documents\\\\Atom_Projects\\\\webApp\\\\highscore\\\\src\\\\component\\\\JsonProcessor.js\";\nimport React from 'react';\nimport data from './data/scores.json'; //The supplied data\n//import data from 'https://raw.githubusercontent.com/aphex1984/techTest/main/scores.json';\n\nimport Table from './Table.js'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minimumSubs = 3;\nconst maximumSubs = 24;\nconst leaderBoardSize = 10;\n\nfunction JsonProcessor() {\n  var table = []; // The data for the table\n\n  var player = []; // The playet names\n\n  var position = []; // The players \"rank\" in the table\n  // Iterate through the JSON data, group up scores for each player\n\n  for (var i = 0; i < data.length; i++) {\n    var name = data[i];\n\n    if (name.submissions.length > minimumSubs) {\n      // Ruling out players with less than 3 submissions\n      var arr = name.submissions;\n      var scoreTotal = [];\n\n      for (var j = 0; j < arr.length; j++) {\n        var scores = arr[j];\n        scoreTotal.push(scores.score);\n      }\n\n      var entry = [];\n      entry.push(name.name);\n      entry.push(totalScores(scoreTotal)); // Totalling submissions for each player\n\n      table.push(entry); // This is the Score and Name data for the highscore table\n    }\n  } // Sorting table data in score order\n\n\n  table.sort(function (a, b) {\n    return b[1] - a[1];\n  }); // Reducing the size of our table to the most successful participants\n\n  table.length = leaderBoardSize; // Calculating the positions of each entry and adding it to the table array\n\n  position.push(calculatePostion(table, position));\n\n  for (var n = 0; n < table.length; n++) {\n    table[n].push(position[n]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      data: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this) // Rendering the table\n  ;\n} // This function iterates through the sorted submissions and adds them up.\n// It sorts the submissions in order of score size and adds up the first 24 as per\n// requirement.\n\n\n_c = JsonProcessor;\n\nfunction totalScores(input) {\n  var sum = 0; // Sorting the scores so we can add up the best submissions\n\n  input.sort(function (a, b) {\n    return b - a;\n  });\n\n  for (var k = 0; k < input.length; k++) {\n    //Adding up everything\n    if (k <= maximumSubs - 1) {\n      // Keeping submissions to the best 24.\n      sum += input[k];\n      test++;\n    }\n  }\n\n  return sum;\n} // This function ensures that the rankings are fair. People with equal scores\n// should have equal ranks.\n\n\nfunction calculatePostion(arr, position) {\n  position.push(1);\n\n  for (var m = 1; m < arr.length; m++) {\n    if (arr[m][1] == arr[m - 1][1]) {\n      position.push(position[m - 1]);\n    } else {\n      position.push(position[m - 1] + 1);\n    }\n  }\n\n  return position;\n}\n\nexport default JsonProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonProcessor\");","map":{"version":3,"sources":["C:/Users/aphex/Documents/Atom_Projects/webApp/highscore/src/component/JsonProcessor.js"],"names":["React","data","Table","minimumSubs","maximumSubs","leaderBoardSize","JsonProcessor","table","player","position","i","length","name","submissions","arr","scoreTotal","j","scores","push","score","entry","totalScores","sort","a","b","calculatePostion","n","input","sum","k","test","m"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAAsC;AACtC;;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAIC,KAAK,GAAG,EAAZ,CADuB,CACP;;AAChB,MAAIC,MAAM,GAAG,EAAb,CAFuB,CAEN;;AACjB,MAAIC,QAAQ,GAAG,EAAf,CAHuB,CAGJ;AAEnB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,IAAI,CAACU,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAClC,QAAIE,IAAI,GAAGX,IAAI,CAACS,CAAD,CAAf;;AACA,QAAGE,IAAI,CAACC,WAAL,CAAiBF,MAAjB,GAA0BR,WAA7B,EAA0C;AAAE;AAC1C,UAAIW,GAAG,GAAGF,IAAI,CAACC,WAAf;AACA,UAAIE,UAAU,GAAG,EAAjB;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,GAAG,CAACH,MAAvB,EAA+BK,CAAC,EAAhC,EAAmC;AACjC,YAAIC,MAAM,GAAGH,GAAG,CAACE,CAAD,CAAhB;AACAD,QAAAA,UAAU,CAACG,IAAX,CAAgBD,MAAM,CAACE,KAAvB;AACD;;AACD,UAAIC,KAAK,GAAG,EAAZ;AACAA,MAAAA,KAAK,CAACF,IAAN,CAAWN,IAAI,CAACA,IAAhB;AACAQ,MAAAA,KAAK,CAACF,IAAN,CAAWG,WAAW,CAACN,UAAD,CAAtB,EAVwC,CAUH;;AACrCR,MAAAA,KAAK,CAACW,IAAN,CAAWE,KAAX,EAXwC,CAWrB;AACpB;AACF,GArBsB,CAuBvB;;;AACAb,EAAAA,KAAK,CAACe,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,GAFD,EAxBuB,CA4BvB;;AACAhB,EAAAA,KAAK,CAACI,MAAN,GAAeN,eAAf,CA7BuB,CA+BvB;;AACAI,EAAAA,QAAQ,CAACS,IAAT,CAAcO,gBAAgB,CAAClB,KAAD,EAAQE,QAAR,CAA9B;;AACA,OAAI,IAAIiB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGnB,KAAK,CAACI,MAAzB,EAAiCe,CAAC,EAAlC,EAAqC;AACnCnB,IAAAA,KAAK,CAACmB,CAAD,CAAL,CAASR,IAAT,CAAcT,QAAQ,CAACiB,CAAD,CAAtB;AACD;;AAED,sBACE;AAAA,2BAAK,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEnB;AAAb;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UADF,CACmC;AADnC;AAGD,C,CAGD;AACA;AACA;;;KA7CSD,a;;AA8CT,SAASe,WAAT,CAAqBM,KAArB,EAA2B;AACzB,MAAIC,GAAG,GAAG,CAAV,CADyB,CAGzB;;AACAD,EAAAA,KAAK,CAACL,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AACvB,WAAOA,CAAC,GAAGD,CAAX;AACD,GAFD;;AAIA,OAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAAChB,MAAzB,EAAiCkB,CAAC,EAAlC,EAAqC;AAAE;AACrC,QAAGA,CAAC,IAAIzB,WAAW,GAAG,CAAtB,EAAwB;AAAE;AACxBwB,MAAAA,GAAG,IAAID,KAAK,CAACE,CAAD,CAAZ;AACAC,MAAAA,IAAI;AACL;AACF;;AACD,SAAOF,GAAP;AACD,C,CAED;AACA;;;AACA,SAASH,gBAAT,CAA0BX,GAA1B,EAA+BL,QAA/B,EAAyC;AACvCA,EAAAA,QAAQ,CAACS,IAAT,CAAc,CAAd;;AACA,OAAI,IAAIa,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGjB,GAAG,CAACH,MAAvB,EAA+BoB,CAAC,EAAhC,EAAmC;AACjC,QAAGjB,GAAG,CAACiB,CAAD,CAAH,CAAO,CAAP,KAAajB,GAAG,CAACiB,CAAC,GAAG,CAAL,CAAH,CAAW,CAAX,CAAhB,EAA8B;AAC5BtB,MAAAA,QAAQ,CAACS,IAAT,CAAcT,QAAQ,CAACsB,CAAC,GAAG,CAAL,CAAtB;AACD,KAFD,MAEO;AACLtB,MAAAA,QAAQ,CAACS,IAAT,CAAcT,QAAQ,CAACsB,CAAC,GAAG,CAAL,CAAR,GAAkB,CAAhC;AACD;AACF;;AACD,SAAOtB,QAAP;AACD;;AAGD,eAAeH,aAAf","sourcesContent":["import React from 'react';\r\nimport data from './data/scores.json' //The supplied data\r\n//import data from 'https://raw.githubusercontent.com/aphex1984/techTest/main/scores.json';\r\nimport Table from './Table.js'\r\n\r\n// Constants\r\nconst minimumSubs = 3;\r\nconst maximumSubs = 24;\r\nconst leaderBoardSize = 10;\r\n\r\nfunction JsonProcessor() {\r\n  var table = []; // The data for the table\r\n  var player = []; // The playet names\r\n  var position = []; // The players \"rank\" in the table\r\n\r\n  // Iterate through the JSON data, group up scores for each player\r\n  for(var i = 0; i < data.length; i++){\r\n    var name = data[i];\r\n    if(name.submissions.length > minimumSubs) { // Ruling out players with less than 3 submissions\r\n      var arr = name.submissions;\r\n      var scoreTotal = [];\r\n\r\n      for(var j = 0; j < arr.length; j++){\r\n        var scores = arr[j];\r\n        scoreTotal.push(scores.score);\r\n      }\r\n      var entry = [];\r\n      entry.push(name.name);\r\n      entry.push(totalScores(scoreTotal)); // Totalling submissions for each player\r\n      table.push(entry); // This is the Score and Name data for the highscore table\r\n    }\r\n  }\r\n\r\n  // Sorting table data in score order\r\n  table.sort(function(a,b) {\r\n    return b[1] - a[1];\r\n  });\r\n\r\n  // Reducing the size of our table to the most successful participants\r\n  table.length = leaderBoardSize;\r\n\r\n  // Calculating the positions of each entry and adding it to the table array\r\n  position.push(calculatePostion(table, position));\r\n  for(var n = 0; n < table.length; n++){\r\n    table[n].push(position[n]);\r\n  }\r\n\r\n  return (\r\n    <div><Table data={table}/></div> // Rendering the table\r\n  );\r\n}\r\n\r\n\r\n// This function iterates through the sorted submissions and adds them up.\r\n// It sorts the submissions in order of score size and adds up the first 24 as per\r\n// requirement.\r\nfunction totalScores(input){\r\n  var sum = 0;\r\n\r\n  // Sorting the scores so we can add up the best submissions\r\n  input.sort(function(a,b) {\r\n    return b - a;\r\n  });\r\n\r\n  for(var k = 0; k < input.length; k++){ //Adding up everything\r\n    if(k <= maximumSubs - 1){ // Keeping submissions to the best 24.\r\n      sum += input[k];\r\n      test ++;\r\n    }\r\n  }\r\n  return(sum);\r\n}\r\n\r\n// This function ensures that the rankings are fair. People with equal scores\r\n// should have equal ranks.\r\nfunction calculatePostion(arr, position) {\r\n  position.push(1);\r\n  for(var m = 1; m < arr.length; m++){\r\n    if(arr[m][1] == arr[m - 1][1]){\r\n      position.push(position[m - 1])\r\n    } else {\r\n      position.push(position[m - 1] + 1)\r\n    }\r\n  }\r\n  return(position);\r\n}\r\n\r\n\r\nexport default JsonProcessor;\r\n"]},"metadata":{},"sourceType":"module"}