[{"C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\index.js":"1","C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\reportWebVitals.js":"2","C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\App.js":"3","C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\JsonProcessor.js":"4","C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\Table.js":"5"},{"size":560,"mtime":1649974557239,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1649873642919,"results":"8","hashOfConfig":"7"},{"size":246,"mtime":1649974544644,"results":"9","hashOfConfig":"7"},{"size":2607,"mtime":1649977364634,"results":"10","hashOfConfig":"7"},{"size":561,"mtime":1649974531491,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f461bi",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\index.js",[],[],"C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\reportWebVitals.js",[],[],"C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\App.js",[],[],"C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\JsonProcessor.js",["28","29"],[],"import React from 'react';\r\nimport data from './data/scores.json' //The supplied data\r\n//import data from 'https://raw.githubusercontent.com/aphex1984/techTest/main/scores.json';\r\nimport Table from './Table.js'\r\n\r\n// Constants\r\nconst minimumSubs = 3;\r\nconst maximumSubs = 24;\r\nconst leaderBoardSize = 10;\r\n\r\nfunction JsonProcessor() {\r\n  var table = []; // The data for the table\r\n  var player = []; // The playet names\r\n  var position = []; // The players \"rank\" in the table\r\n\r\n  // Iterate through the JSON data, group up scores for each player\r\n  for(var i = 0; i < data.length; i++){\r\n    var name = data[i];\r\n    if(name.submissions.length > minimumSubs) { // Ruling out players with less than 3 submissions\r\n      var arr = name.submissions;\r\n      var scoreTotal = [];\r\n\r\n      for(var j = 0; j < arr.length; j++){\r\n        var scores = arr[j];\r\n        scoreTotal.push(scores.score);\r\n      }\r\n      var entry = [];\r\n      entry.push(name.name);\r\n      entry.push(totalScores(scoreTotal)); // Totalling submissions for each player\r\n      table.push(entry); // This is the Score and Name data for the highscore table\r\n    }\r\n  }\r\n\r\n  // Sorting table data in score order\r\n  table.sort(function(a,b) {\r\n    return b[1] - a[1];\r\n  });\r\n\r\n  // Reducing the size of our table to the most successful participants\r\n  table.length = leaderBoardSize;\r\n\r\n  // Calculating the positions of each entry and adding it to the table array\r\n  position.push(calculatePostion(table, position));\r\n  for(var n = 0; n < table.length; n++){\r\n    table[n].push(position[n]);\r\n  }\r\n\r\n  return (\r\n    <div><Table data={table}/></div> // Rendering the table\r\n  );\r\n}\r\n\r\n\r\n// This function iterates through the sorted submissions and adds them up.\r\n// It sorts the submissions in order of score size and adds up the first 24 as per\r\n// requirement.\r\nfunction totalScores(input){\r\n  var sum = 0;\r\n\r\n  // Sorting the scores so we can add up the best submissions\r\n  input.sort(function(a,b) {\r\n    return b - a;\r\n  });\r\n\r\n  for(var k = 0; k < input.length; k++){ //Adding up everything\r\n    if(k <= maximumSubs - 1){ // Keeping submissions to the best 24.\r\n      sum += input[k];\r\n    }\r\n  }\r\n  return(sum);\r\n}\r\n\r\n// This function ensures that the rankings are fair. People with equal scores\r\n// should have equal ranks.\r\nfunction calculatePostion(arr, position) {\r\n  position.push(1);\r\n  for(var m = 1; m < arr.length; m++){\r\n    if(arr[m][1] == arr[m - 1][1]){\r\n      position.push(position[m - 1])\r\n    } else {\r\n      position.push(position[m - 1] + 1)\r\n    }\r\n  }\r\n  return(position);\r\n}\r\n\r\n\r\nexport default JsonProcessor;\r\n","C:\\Users\\aphex\\Documents\\Atom_Projects\\webApp\\highscore\\src\\component\\Table.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":13,"column":7,"nodeType":"32","messageId":"33","endLine":13,"endColumn":13},{"ruleId":"34","severity":1,"message":"35","line":78,"column":18,"nodeType":"36","messageId":"37","endLine":78,"endColumn":20},"no-unused-vars","'player' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]